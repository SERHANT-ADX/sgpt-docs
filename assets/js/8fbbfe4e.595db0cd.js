"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[2500],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,c=m["".concat(d,".").concat(u)]||m[u]||g[u]||i;return n?a.createElement(c,s(s({ref:t},p),{},{components:n})):a.createElement(c,s({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8280:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={},s=void 0,o={unversionedId:"Hooks/useGetGeneratedImages",id:"Hooks/useGetGeneratedImages",title:"useGetGeneratedImages",description:"The useGetGeneratedImages custom hook is designed for fetching and managing generated images data from a Firebase Realtime Database. This hook is intended to be used in a React application and provides functionality for loading the initial generated images and subscribing to real-time updates.",source:"@site/docs/Hooks/useGetGeneratedImages.md",sourceDirName:"Hooks",slug:"/Hooks/useGetGeneratedImages",permalink:"/sgpt-docs/Hooks/useGetGeneratedImages",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Hooks/useGetGeneratedImages.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useGetDetailedListing",permalink:"/sgpt-docs/Hooks/useGetDetailedListing"},next:{title:"useGetImagesPresets",permalink:"/sgpt-docs/Hooks/useGetImagesPresets"}},d={},l=[{value:"Usage",id:"usage",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Example Usage",id:"example-usage",level:3}],p={toc:l},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetGeneratedImages")," custom hook is designed for fetching and managing generated images data from a Firebase Realtime Database. This hook is intended to be used in a React application and provides functionality for loading the initial generated images and subscribing to real-time updates."),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import useGetGeneratedImages from './useGetGeneratedImages';\n\n// Inside a functional component\nuseGetGeneratedImages({\n  generatedImages,\n  UID,\n  setGeneratedImages,\n  setGeneratedImagesIsLoading,\n});\n")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"generatedImages")," (Array): An array representing the current generated images that you want to update."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UID")," (String): A unique identifier, typically representing a user, to retrieve their generated images."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setGeneratedImages")," (Function): A function used to update the generated images."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setGeneratedImagesIsLoading")," (Function): A function used to set the loading state of generated images.")),(0,r.kt)("h3",{id:"return-value"},"Return Value"),(0,r.kt)("p",null,"This custom hook doesn't return any value directly. Instead, it internally manages the state of generated images and their loading status through the provided functions (",(0,r.kt)("inlineCode",{parentName:"p"},"setGeneratedImages")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setGeneratedImagesIsLoading"),")."),(0,r.kt)("h3",{id:"functionality"},"Functionality"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Importing Dependencies"),": The hook starts by importing necessary dependencies like ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," for side effects, ",(0,r.kt)("inlineCode",{parentName:"p"},"EditingImagesAPI")," for initial generated images data fetching, and Firebase Realtime Database functions (",(0,r.kt)("inlineCode",{parentName:"p"},"off"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"db"),") for subscribing to real-time updates.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Defining the Custom Hook"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetGeneratedImages")," function is defined, which takes several parameters to set up and manage generated images data.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Initial Generated Images Loading"),": The hook checks if the ",(0,r.kt)("inlineCode",{parentName:"p"},"generatedImages")," array is empty or falsy. If it is, it fetches initial generated images using the ",(0,r.kt)("inlineCode",{parentName:"p"},"EditingImagesAPI.getGeneratedImages")," function, passing the user's ",(0,r.kt)("inlineCode",{parentName:"p"},"UID"),". This is typically done only once when the component mounts.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Real-time Updates Subscription"),": It sets up a Firebase Realtime Database reference to the generated images specific to the user's ",(0,r.kt)("inlineCode",{parentName:"p"},"UID"),". It defines an ",(0,r.kt)("inlineCode",{parentName:"p"},"onDataChange")," function that is called whenever the data at the reference location changes. Inside this function, it updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"generatedImages")," state with the latest generated images data obtained from the snapshot.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Cleanup"),": The hook returns a cleanup function that unsubscribes from real-time updates by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"off")," on the reference when the component unmounts.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Effect Dependency"),": The effect runs whenever any of the dependencies specified in the dependency array change (",(0,r.kt)("inlineCode",{parentName:"p"},"[UID, setGeneratedImages, setGeneratedImagesIsLoading]"),"). This allows you to control when the hook fetches and updates generated images based on changes in the provided dependencies."))),(0,r.kt)("h3",{id:"example-usage"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import React, { useState } from 'react';\nimport useGetGeneratedImages from './useGetGeneratedImages';\n\nfunction GeneratedImagesComponent({ UID }) {\n  const [generatedImages, setGeneratedImages] = useState([]);\n  const [generatedImagesIsLoading, setGeneratedImagesIsLoading] = useState(true);\n\n  useGetGeneratedImages({\n    generatedImages,\n    UID,\n    setGeneratedImages,\n    setGeneratedImagesIsLoading,\n  });\n\n  // Render generated images and loading state\n  return (\n    <div>\n      {generatedImagesIsLoading ? (\n        <div>Loading generated images...</div>\n      ) : (\n        <ul>\n          {generatedImages.map((image) => (\n            <li key={image.id}>{image.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default GeneratedImagesComponent;\n")),(0,r.kt)("p",null,"In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetGeneratedImages")," hook is used within a React component to manage and display the generated images data, handle loading states, and subscribe to real-time updates from Firebase Realtime Database."))}g.isMDXComponent=!0}}]);