"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[228],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=l(n),c=s,g=m["".concat(p,".").concat(c)]||m[c]||d[c]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:s,i[1]=o;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(7462),s=(n(7294),n(3905));const r={},i=void 0,o={unversionedId:"Hooks/useGetImagesPresets",id:"Hooks/useGetImagesPresets",title:"useGetImagesPresets",description:"The useGetImagesPresets custom hook is designed for fetching and managing image presets data from a Firebase Realtime Database. This hook is intended to be used in a React application and provides functionality for loading the initial image presets and subscribing to real-time updates.",source:"@site/docs/Hooks/useGetImagesPresets.md",sourceDirName:"Hooks",slug:"/Hooks/useGetImagesPresets",permalink:"/sgpt-docs/Hooks/useGetImagesPresets",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Hooks/useGetImagesPresets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useGetGeneratedImages",permalink:"/sgpt-docs/Hooks/useGetGeneratedImages"},next:{title:"useHandleDetailedListingItem",permalink:"/sgpt-docs/Hooks/useHandleDetailedListingItem"}},p={},l=[{value:"Usage",id:"usage",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Example Usage",id:"example-usage",level:3}],u={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"useGetImagesPresets")," custom hook is designed for fetching and managing image presets data from a Firebase Realtime Database. This hook is intended to be used in a React application and provides functionality for loading the initial image presets and subscribing to real-time updates."),(0,s.kt)("h3",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import useGetImagesPresets from './useGetImagesPresets';\n\n// Inside a functional component\nuseGetImagesPresets({\n  UID,\n  presets,\n  setPresets,\n  setPresetsIsLoading,\n});\n")),(0,s.kt)("h3",{id:"parameters"},"Parameters"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"UID")," (String): A unique identifier, typically representing a user, to retrieve their image presets."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"presets")," (Array): An array representing the current image presets that you want to update."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"setPresets")," (Function): A function used to update the image presets."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"setPresetsIsLoading")," (Function): A function used to set the loading state of image presets.")),(0,s.kt)("h3",{id:"return-value"},"Return Value"),(0,s.kt)("p",null,"This custom hook doesn't return any value directly. Instead, it internally manages the state of image presets and their loading status through the provided functions (",(0,s.kt)("inlineCode",{parentName:"p"},"setPresets")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"setPresetsIsLoading"),")."),(0,s.kt)("h3",{id:"functionality"},"Functionality"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Importing Dependencies"),": The hook starts by importing necessary dependencies like ",(0,s.kt)("inlineCode",{parentName:"p"},"useEffect")," for side effects, ",(0,s.kt)("inlineCode",{parentName:"p"},"EditingImagesAPI")," for initial image presets data fetching, and Firebase Realtime Database functions (",(0,s.kt)("inlineCode",{parentName:"p"},"off"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"onValue"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"db"),") for subscribing to real-time updates.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Defining the Custom Hook"),": The ",(0,s.kt)("inlineCode",{parentName:"p"},"useGetImagesPresets")," function is defined, which takes several parameters to set up and manage image presets data.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Initial Image Presets Loading"),": The hook checks if the ",(0,s.kt)("inlineCode",{parentName:"p"},"presets")," array is empty or falsy. If it is, it fetches initial image presets using the ",(0,s.kt)("inlineCode",{parentName:"p"},"EditingImagesAPI.getPresets")," function, passing the user's ",(0,s.kt)("inlineCode",{parentName:"p"},"UID"),". This is typically done only once when the component mounts.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Real-time Updates Subscription"),": It sets up a Firebase Realtime Database reference to the image presets specific to the user's ",(0,s.kt)("inlineCode",{parentName:"p"},"UID"),". It defines an ",(0,s.kt)("inlineCode",{parentName:"p"},"onDataChange")," function that is called whenever the data at the reference location changes. Inside this function, it updates the ",(0,s.kt)("inlineCode",{parentName:"p"},"presets")," state with the latest image presets data obtained from the snapshot.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Cleanup"),": The hook returns a cleanup function that unsubscribes from real-time updates by calling ",(0,s.kt)("inlineCode",{parentName:"p"},"off")," on the reference when the component unmounts.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Effect Dependency"),": The effect runs whenever any of the dependencies specified in the dependency array change (",(0,s.kt)("inlineCode",{parentName:"p"},"[UID, setPresets, setPresetsIsLoading]"),"). This allows you to control when the hook fetches and updates image presets based on changes in the provided dependencies."))),(0,s.kt)("h3",{id:"example-usage"},"Example Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import React, { useState } from 'react';\nimport useGetImagesPresets from './useGetImagesPresets';\n\nfunction ImagePresetsComponent({ UID }) {\n  const [presets, setPresets] = useState([]);\n  const [presetsIsLoading, setPresetsIsLoading] = useState(true);\n\n  useGetImagesPresets({\n    UID,\n    presets,\n    setPresets,\n    setPresetsIsLoading,\n  });\n\n  // Render image presets and loading state\n  return (\n    <div>\n      {presetsIsLoading ? (\n        <div>Loading image presets...</div>\n      ) : (\n        <ul>\n          {presets.map((preset) => (\n            <li key={preset.id}>{preset.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default ImagePresetsComponent;\n")),(0,s.kt)("p",null,"In this example, the ",(0,s.kt)("inlineCode",{parentName:"p"},"useGetImagesPresets")," hook is used within a React component to manage image presets data, handle loading states, and subscribe to real-time updates from Firebase Realtime Database."))}d.isMDXComponent=!0}}]);