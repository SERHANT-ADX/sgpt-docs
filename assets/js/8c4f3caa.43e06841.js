"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[6303],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,k=d["".concat(s,".").concat(c)]||d[c]||u[c]||l;return n?a.createElement(k,r(r({ref:t},m),{},{components:n})):a.createElement(k,r({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const l={},r=void 0,o={unversionedId:"Components/Modals/SavePresetModal/SavePresetModal",id:"Components/Modals/SavePresetModal/SavePresetModal",title:"SavePresetModal",description:"The SavePresetModal component is designed to provide a user interface for saving or updating presets. It allows users",source:"@site/docs/Components/Modals/SavePresetModal/SavePresetModal.md",sourceDirName:"Components/Modals/SavePresetModal",slug:"/Components/Modals/SavePresetModal/",permalink:"/Components/Modals/SavePresetModal/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/Modals/SavePresetModal/SavePresetModal.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GenerationContentModal",permalink:"/Components/Modals/GenerationContentModal/"},next:{title:"GeneratedImageItem",permalink:"/Components/ProfilePage/GeneratedImageItem/"}},s={},p=[{value:"Props",id:"props",level:3},{value:"Component Structure",id:"component-structure",level:3},{value:"Handlers",id:"handlers",level:3},{value:"Effects",id:"effects",level:3},{value:"Main Logic",id:"main-logic",level:3},{value:"Overview",id:"overview",level:3}],m={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SavePresetModal")," component is designed to provide a user interface for saving or updating presets. It allows users\nto enter preset information, including a name, advanced filter settings, and an optional thumbnail image. This component\nis intended to be used within a modal dialog."),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"open")," (boolean, required): Controls the visibility of the modal."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleClose")," (function, required): Callback function to handle the modal close event."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleSavePreset")," (function, required): Callback function to handle the save/update preset event."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"activePreset")," (object, optional): The currently active preset to be updated. If provided, the modal will be used for\nupdating the preset.")),(0,i.kt)("h3",{id:"component-structure"},"Component Structure"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Modal Container"),": A ",(0,i.kt)("inlineCode",{parentName:"p"},"Modal")," component that encapsulates the entire content of the modal."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The modal opens when ",(0,i.kt)("inlineCode",{parentName:"li"},"open")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," and closes using the ",(0,i.kt)("inlineCode",{parentName:"li"},"handleClose")," callback."),(0,i.kt)("li",{parentName:"ul"},"The modal content is wrapped in a ",(0,i.kt)("inlineCode",{parentName:"li"},"form")," element to enable form submission."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Header"),": Displays the title of the modal and a close icon."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'The title is "Edit Preset" for updating an existing preset or "Save Preset" for creating a new preset.'),(0,i.kt)("li",{parentName:"ul"},"The close icon triggers the ",(0,i.kt)("inlineCode",{parentName:"li"},"handleClose")," callback when clicked."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Content"),": Contains sections for preset name, advanced filters, and preset image."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Each section is represented by a ",(0,i.kt)("inlineCode",{parentName:"li"},"Box")," component with associated content."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Preset Name Section"),": Allows users to input the name of the preset."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"TextField")," component is used to capture the preset name."),(0,i.kt)("li",{parentName:"ul"},"Validation errors are displayed using ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"helperText")," props."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Advanced Filters Section"),": Displays advanced filter settings."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"AdvancedFiltersFormFields")," component is used to present advanced filter options."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setFieldValue")," and other props are passed to handle advanced filter changes."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Preset Image Section"),": Manages preset thumbnail image."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"FileInput")," component is used to handle image selection and display."),(0,i.kt)("li",{parentName:"ul"},"The selected image is previewed, and the user can remove it or upload a new one."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Preview Image Section"),": Displays the preview of the selected image."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Shown only when an image is selected or when updating an existing preset."),(0,i.kt)("li",{parentName:"ul"},"Renders an ",(0,i.kt)("inlineCode",{parentName:"li"},"img")," tag with the source set to the ",(0,i.kt)("inlineCode",{parentName:"li"},"previewImage")," calculated using ",(0,i.kt)("inlineCode",{parentName:"li"},"useMemo"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Footer"),": Contains buttons for canceling and saving the preset."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'The "Cancel" button triggers the ',(0,i.kt)("inlineCode",{parentName:"li"},"handleClose")," callback."),(0,i.kt)("li",{parentName:"ul"},'The "Save Preset" or "Update Preset" button triggers the ',(0,i.kt)("inlineCode",{parentName:"li"},"handleSubmit")," callback.")))),(0,i.kt)("h3",{id:"handlers"},"Handlers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"handleSubmitSavingPreset")),": Handles the form submission by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleSavePreset")," callback with the form\nvalues.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"handleFileChange")),": Handles the file selection event for the preset image input."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Sets the selected image in the form values using the ",(0,i.kt)("inlineCode",{parentName:"li"},"setFieldValue")," function.")))),(0,i.kt)("h3",{id:"effects"},"Effects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"useEffect")," for Set Initial Values"),": Sets the initial form values when an ",(0,i.kt)("inlineCode",{parentName:"li"},"activePreset")," is provided.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This effect ensures that the modal is populated with the existing preset's data for updating.")))),(0,i.kt)("h3",{id:"main-logic"},"Main Logic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"static",static:!0},"const initialFormValues = {\n    image: null,\n    name: '',\n    ...defaultAdvancedValues,\n};\n\nconst activePresetInitialValues = useMemo(\n    () => ({\n        image: activePreset?.thumbnail,\n        name: activePreset?.name,\n        ...getAdvancedFiltersFormValues(activePreset),\n    }),\n    [activePreset],\n);\n")),(0,i.kt)("p",null,"Here, you are initializing two objects that hold the initial form values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"formik")," form. Let's break down each\npart:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"initialFormValues")),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This object represents the initial values for the form fields. It includes three properties: ",(0,i.kt)("inlineCode",{parentName:"li"},"image"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),", and\nproperties from ",(0,i.kt)("inlineCode",{parentName:"li"},"defaultAdvancedValues"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"image"),": Initialized to ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", representing no selected image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": An empty string, representing the preset's name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"...defaultAdvancedValues"),": This spread operator is used to incorporate properties from ",(0,i.kt)("inlineCode",{parentName:"li"},"defaultAdvancedValues"),"\nobject. This could include advanced filter settings."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"activePresetInitialValues")),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This object is created using the ",(0,i.kt)("inlineCode",{parentName:"li"},"useMemo")," hook to calculate the initial values when there's an ",(0,i.kt)("inlineCode",{parentName:"li"},"activePreset"),"."),(0,i.kt)("li",{parentName:"ul"},"It sets ",(0,i.kt)("inlineCode",{parentName:"li"},"image")," to the ",(0,i.kt)("inlineCode",{parentName:"li"},"thumbnail")," of the ",(0,i.kt)("inlineCode",{parentName:"li"},"activePreset"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," to the ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," of the ",(0,i.kt)("inlineCode",{parentName:"li"},"activePreset"),", and other\nproperties using ",(0,i.kt)("inlineCode",{parentName:"li"},"getAdvancedFiltersFormValues(activePreset)"),"."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"activePreset")," properties provide a default value for fields when editing a preset.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"static",static:!0},"const handleSubmitSavingPreset = (values) => {\n    handleSavePreset(values);\n};\n\nconst formik = useFormik({\n    initialValues: activePreset ? activePresetInitialValues : initialFormValues,\n    onSubmit: handleSubmitSavingPreset,\n});\n\nconst { handleSubmit, setFieldValue, values, errors } = formik;\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"handleSubmitSavingPreset")),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This function handles the submission of the form. It receives the ",(0,i.kt)("inlineCode",{parentName:"li"},"values")," object containing form field values and\npasses it to the ",(0,i.kt)("inlineCode",{parentName:"li"},"handleSavePreset")," function, presumably to save or update a preset."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"formik")," Hook"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"useFormik")," hook is used to manage form state and behavior."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initialValues"),": Determines the initial values for the form fields."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onSubmit"),": Specifies the function to be called when the form is submitted."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Destructuring"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"formik")," object is destructured to access key functions and properties."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleSubmit"),": This function is triggered when the form is submitted. It manages form submission and validation."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setFieldValue"),": This function is used to set the value of a specific form field. In this case, it's used to\nupdate the selected image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"values"),": Represents the current form field values."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"errors"),": Holds form validation error messages.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"static",static:!0},"const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    setFieldValue('image', file);\n};\n\nconst previewImage = useMemo(() => {\n    // Calculations to determine previewImage\n}, [activePreset, values.image]);\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"handleFileChange")),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This function is called when a file is selected using the file input."),(0,i.kt)("li",{parentName:"ul"},"It extracts the selected file and uses ",(0,i.kt)("inlineCode",{parentName:"li"},"setFieldValue")," to update the ",(0,i.kt)("inlineCode",{parentName:"li"},"image")," field in the form."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"useMemo")," for ",(0,i.kt)("inlineCode",{parentName:"strong"},"previewImage")),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This hook calculates the value of ",(0,i.kt)("inlineCode",{parentName:"li"},"previewImage")," using complex logic based on various conditions."),(0,i.kt)("li",{parentName:"ul"},"It checks whether there's an image in ",(0,i.kt)("inlineCode",{parentName:"li"},"values"),", whether it's a URL or a file, whether there's an ",(0,i.kt)("inlineCode",{parentName:"li"},"activePreset"),"\nwith a thumbnail, and defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"progressiveImage")," if no other conditions match."),(0,i.kt)("li",{parentName:"ul"},"The dependencies array ",(0,i.kt)("inlineCode",{parentName:"li"},"[activePreset, values.image]")," ensures that this calculation is recomputed when these\nvalues change.")))),(0,i.kt)("p",null,"In summary, this code snippet initializes form values, sets up form handling using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useFormik")," hook, and manages\nimage selection, preview, and display logic using various handlers and hooks. The use of ",(0,i.kt)("inlineCode",{parentName:"p"},"useMemo")," optimizes the\ncalculation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"previewImage"),' based on changing dependencies."'),(0,i.kt)("h3",{id:"overview"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The component uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"useFormik")," hook for form management."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"useMemo")," hook is used to calculate the ",(0,i.kt)("inlineCode",{parentName:"li"},"previewImage")," based on various conditions."),(0,i.kt)("li",{parentName:"ul"},"The modal provides an interface for creating and updating presets with details and a thumbnail image."),(0,i.kt)("li",{parentName:"ul"},"It enhances user experience by providing visual cues for form interactions and image upload.")),(0,i.kt)("p",null,"This component helps users manage their presets efficiently within the application."))}u.isMDXComponent=!0}}]);