"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[7310],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=d(n),c=i,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[m]="string"==typeof e?e:i,l[1]=r;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const o={},l=void 0,r={unversionedId:"Components/Modals/AddingListingsModal/AddingListingsModal",id:"Components/Modals/AddingListingsModal/AddingListingsModal",title:"AddingListingsModal",description:"The AddingListingsModal component is responsible for displaying a modal that allows users to add listings to content",source:"@site/docs/Components/Modals/AddingListingsModal/AddingListingsModal.md",sourceDirName:"Components/Modals/AddingListingsModal",slug:"/Components/Modals/AddingListingsModal/",permalink:"/Components/Modals/AddingListingsModal/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/Modals/AddingListingsModal/AddingListingsModal.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RoomMainListItem",permalink:"/Components/MainPage/RoomMainListItem/"},next:{title:"ChangelogDialog",permalink:"/Components/Modals/ChangelogDialog/"}},s={},d=[{value:"Props",id:"props",level:3},{value:"How to Use",id:"how-to-use",level:3},{value:"Component Structure",id:"component-structure",level:3},{value:"Hooks and Data Fetching",id:"hooks-and-data-fetching",level:3},{value:"Handlers and Actions",id:"handlers-and-actions",level:3},{value:"Static Variables",id:"static-variables",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Notes",id:"notes",level:3}],p={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AddingListingsModal")," component is responsible for displaying a modal that allows users to add listings to content\ncreation. It includes filters, a list of available rooms, and navigation controls for infinite scrolling."),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AddingListingsModal")," component does not accept any props."),(0,i.kt)("h3",{id:"how-to-use"},"How to Use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import AddingListingsModal from './AddingListingsModal';\n\n// Inside your component\n<AddingListingsModal />;\n")),(0,i.kt)("h3",{id:"component-structure"},"Component Structure"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SwipeableDrawer"),": The outermost wrapper that creates a swipeable drawer modal.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Box sx={sx.container}"),": Container for the modal content.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Box sx={sx.modalHeader}"),": Header section of the modal.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Typography sx={sx.headerTitle}"),": Title of the modal."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Close")," icon: Icon to close the modal."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Box sx={sx.modalContent}"),": Content section of the modal.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Filters section (if filters are applied):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Box sx={sx.chipsContainer}"),": Container for filter chips.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Typography"),': Display "Filters:" label.'),(0,i.kt)("li",{parentName:"ul"},"Filter chips using ",(0,i.kt)("inlineCode",{parentName:"li"},"Chip")," component."))))),(0,i.kt)("li",{parentName:"ul"},"Available rooms section:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"InfiniteScroll component for lazy loading and infinite scrolling.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Box sx={sx.roomsList}"),": Container for displaying room items."),(0,i.kt)("li",{parentName:"ul"},"Loading indicator (Loader) during data fetching."),(0,i.kt)("li",{parentName:"ul"},"Scroll top button (if all items are loaded)."))))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Box sx={sx.modalFooter}"),": Footer section of the modal.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Close button to dismiss the modal.")))))))),(0,i.kt)("h3",{id:"hooks-and-data-fetching"},"Hooks and Data Fetching"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useAppProvider"),": Custom hook to manage global state for the modal."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Manages current page, rooms, filter options, regions, and modal open state."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useHandleListings"),": Custom hook to fetch room listings and handle pagination."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Accepts ",(0,i.kt)("inlineCode",{parentName:"li"},"filterOptions"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"currentPage"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"regions"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"rooms")," as dependencies."),(0,i.kt)("li",{parentName:"ul"},"Returns ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," (room listings) and ",(0,i.kt)("inlineCode",{parentName:"li"},"isLoading")," status.")))),(0,i.kt)("h3",{id:"handlers-and-actions"},"Handlers and Actions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scrollToTop"),": Function to scroll to the top of the room listings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleCloseAddingModal"),": Function to close the modal."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleAddListing"),": Function to handle adding a listing and navigating to the creation page."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleDeleteFilterField"),": Function to remove a filter field (region or filter option).")),(0,i.kt)("h3",{id:"static-variables"},"Static Variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": Current user's UID obtained from Firebase authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"totalListings"),": Total number of room listings from the fetched data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filterChipsList"),": A list of filter chips generated from filter options and regions.")),(0,i.kt)("h3",{id:"example-usage"},"Example Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import { memo } from 'react';\nimport AddingListingsModal from './AddingListingsModal';\n\nconst ParentComponent = () => {\n    // ... other logic ...\n\n    return (\n        // ... other JSX ...\n\n        // Rendering the AddingListingsModal component\n        <AddingListingsModal />\n\n        // ... other JSX ...\n    );\n};\n\nexport default memo(ParentComponent);\n")),(0,i.kt)("h3",{id:"notes"},"Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"AddingListingsModal")," component integrates with other custom hooks and services to fetch and display room\nlistings, handle filters, and manage the state of the modal."),(0,i.kt)("li",{parentName:"ul"},"It utilizes various Material-UI components for styling, interaction, and layout."),(0,i.kt)("li",{parentName:"ul"},"The component is structured in a modular way, separating the modal content into different sections for filters, rooms,\nand footer.")))}u.isMDXComponent=!0}}]);