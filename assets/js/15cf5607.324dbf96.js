"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[1702],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=i,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return a?n.createElement(g,o(o({ref:t},d),{},{components:a})):n.createElement(g,o({ref:t},d))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5915:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={},o=void 0,s={unversionedId:"Pages/Profile page/ProfilePageProvider",id:"Pages/Profile page/ProfilePageProvider",title:"ProfilePageProvider",description:"The ProfilePageProvider component is a React context provider that manages the state and logic related to a user's",source:"@site/docs/Pages/Profile page/ProfilePageProvider.md",sourceDirName:"Pages/Profile page",slug:"/Pages/Profile page/ProfilePageProvider",permalink:"/sgpt-docs/Pages/Profile page/ProfilePageProvider",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Pages/Profile page/ProfilePageProvider.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ProfilePage",permalink:"/sgpt-docs/Pages/Profile page/ProfilePage"}},l={},p=[{value:"Statics:",id:"statics",level:3},{value:"Hooks:",id:"hooks",level:3},{value:"Effects:",id:"effects",level:3},{value:"<code>useEffect</code> for Managing Favorite Listings",id:"useeffect-for-managing-favorite-listings",level:4},{value:"Handlers:",id:"handlers",level:3},{value:"Context Value:",id:"context-value",level:3},{value:"Custom Hook:",id:"custom-hook",level:3},{value:"Usage:",id:"usage",level:3}],d={toc:p},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePageProvider")," component is a React context provider that manages the state and logic related to a user's\nprofile page. It encapsulates various pieces of functionality and data that are used within the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePage")," component,\nmaking them available to all the child components of ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePage"),". The component utilizes hooks, statics, and effects\nto achieve its functionality."),(0,i.kt)("h3",{id:"statics"},"Statics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": These static variables are extracted from the ",(0,i.kt)("inlineCode",{parentName:"li"},"useAuthorization ")," hook provider to get the current\nuser's information\nand unique identifier (",(0,i.kt)("inlineCode",{parentName:"li"},"UID"),").")),(0,i.kt)("h3",{id:"hooks"},"Hooks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"screenSize")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"isMobile"),": These hooks utilize the ",(0,i.kt)("inlineCode",{parentName:"p"},"useScreenSize")," custom hook to determine the screen size and\nwhether the user is on a mobile device.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"navigate"),": This hook is used to programmatically navigate the user to different routes within the application.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useParams"),": This hook retrieves parameters from the URL route.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useState"),": Several state variables are managed using this hook,\nincluding ",(0,i.kt)("inlineCode",{parentName:"p"},"chatThreads"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chatThreadsIsLoading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"presets"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"presetsIsLoading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"generatedImages"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"generatedImagesIsLoading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListings"),",\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"activeListing"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useFavoriteListings"),": This custom hook is used to fetch the user's favorite listings based on their ",(0,i.kt)("inlineCode",{parentName:"p"},"UID"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Other custom hooks such\nas ",(0,i.kt)("inlineCode",{parentName:"p"},"useHandleDetailedListingItem"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetImagesPresets"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetChatThreads"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetAllListings"),",\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetGeneratedImages")," are used to manage specific aspects of the profile page."))),(0,i.kt)("h3",{id:"effects"},"Effects:"),(0,i.kt)("h4",{id:"useeffect-for-managing-favorite-listings"},(0,i.kt)("inlineCode",{parentName:"h4"},"useEffect")," for Managing Favorite Listings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useEffect(() => {\n    const favoriteListings = allListings?.filter((listing) => (favoriteListingsIds || []).includes(listing.Id));\n    setFavoriteListings(favoriteListings || []);\n}, [allListings, UID, favoriteListingsIds]);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Purpose:")," This effect is responsible for updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListings")," state, which contains a list of listings\nthat the user has marked as favorites. It filters ",(0,i.kt)("inlineCode",{parentName:"p"},"allListings")," based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListingsIds")," array, which stores\nthe unique IDs of the user's favorite listings. The filtered list is then set as the new value of ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListings"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dependencies:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allListings"),": An array of all available listings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": The unique identifier of the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"favoriteListingsIds"),": An array of unique IDs representing the user's favorite listings.")),(0,i.kt)("h3",{id:"handlers"},"Handlers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleApplyFilter"),": This handler is called when a filter is applied. It sets the initial saved filter and navigates\nthe user to the editing page.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleToggleLikePreset"),': This handler is used to toggle the "like" status of an editing preset.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleToggleLikeGeneratedImage"),': This handler is used to toggle the "like" status of a generated image.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleToggleLikeListingItem"),': This handler is used to toggle the "like" status of a favorite listing.'))),(0,i.kt)("h3",{id:"context-value"},"Context Value:"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"contextValue")," is a combination of the various state variables, handlers, and other relevant data mentioned above.\nIt provides these values to child components through the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePageContext.Provider"),"."),(0,i.kt)("h3",{id:"custom-hook"},"Custom Hook:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useProfilePage"),": This custom hook allows other components to easily access the context values provided by\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"ProfilePageProvider"),". It throws an error if used outside the scope of the provider.")),(0,i.kt)("h3",{id:"usage"},"Usage:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The component fetches and manages data related to chat threads, presets, generated images, and favorite listings."),(0,i.kt)("li",{parentName:"ol"},'It handles the navigation between different pages, like applying filters and toggling "like" status.'),(0,i.kt)("li",{parentName:"ol"},"It encapsulates the above logic and makes it available to its child components using the React context API.")),(0,i.kt)("p",null,"Overall, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePageProvider")," is a complex component that centralizes the state management and logic related to a\nuser's profile page, making it easier to maintain and provide a consistent experience across different parts of the\napplication."))}c.isMDXComponent=!0}}]);