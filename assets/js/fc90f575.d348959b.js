"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[5322],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=h(a),m=r,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var h=2;h<o;h++)i[h]=a[h];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5352:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var n=a(7462),r=(a(7294),a(3905));const o={},i=void 0,s={unversionedId:"Pages/Chat page/ChatPage",id:"Pages/Chat page/ChatPage",title:"ChatPage",description:"The ChatPage component represents the main user interface for the chat functionality in the application. It displays",source:"@site/docs/Pages/Chat page/ChatPage.md",sourceDirName:"Pages/Chat page",slug:"/Pages/Chat page/ChatPage",permalink:"/sgpt-docs/Pages/Chat page/ChatPage",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Pages/Chat page/ChatPage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AuthorizationLayer",permalink:"/sgpt-docs/Pages/AuthorizationLayer/"},next:{title:"ChatPageProvider",permalink:"/sgpt-docs/Pages/Chat page/ChatPageProvider"}},l={},h=[{value:"Imports",id:"imports",level:3},{value:"ChatPage Component",id:"chatpage-component",level:3},{value:"Hooks",id:"hooks",level:4},{value:"View Rendering",id:"view-rendering",level:4},{value:"Export",id:"export",level:3}],c={toc:h},p="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatPage")," component represents the main user interface for the chat functionality in the application. It displays\nthe chat threads, active chat messages, and provides controls to create new chat threads and send messages."),(0,r.kt)("h3",{id:"imports"},"Imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import { Box, IconButton } from '@mui/material';\nimport { sx } from './chatPage.sx';\nimport { Menu, Add } from '@mui/icons-material';\nimport MessageItem from '../../components/ChatPage/MessageItem/MessageItem';\nimport EmptyChat from '../../components/ChatPage/EmptyChat/EmptyChat';\nimport ChatThreads from '../../components/ChatPage/ChatThreads/ChatThreads';\nimport ChatControls from '../../components/ChatPage/ChatControls/ChatControls';\nimport ChatThreadsSkeleton from '../../components/Skeletons/SkeletonChatThreads';\nimport ChatMessagesSkeleton from '../../components/Skeletons/ChatMessagesSkeleton';\nimport { useChatPage } from './ChatPageProvider';\nimport { memo } from 'react';\n")),(0,r.kt)("h3",{id:"chatpage-component"},"ChatPage Component"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatPage")," component renders the chat interface, including chat threads and messages."),(0,r.kt)("h4",{id:"hooks"},"Hooks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const {\n    handleToggleChatThreads,\n    handleCreateNewChatThread,\n    chatThreadsIsLoading,\n    profilePhoto,\n    showChatThreads,\n    activeChatThread = null,\n    isLoadingChatThread,\n    chatMessagesRef,\n    isMobile,\n} = useChatPage();\n")),(0,r.kt)("p",null,"The component uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"useChatPage")," hook to retrieve various state and functions required for the chat functionality."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"handleToggleChatThreads"),": A function to toggle the visibility of chat threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"handleCreateNewChatThread"),": A function to create a new chat thread."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chatThreadsIsLoading"),": A boolean indicating whether chat threads are currently loading."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"profilePhoto"),": The profile photo of the user."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"showChatThreads"),": A boolean indicating whether to show chat threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"activeChatThread"),": The currently active chat thread."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isLoadingChatThread"),": A boolean indicating whether chat messages for the active chat thread are loading."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chatMessagesRef"),": A reference to the DOM element for chat messages."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isMobile"),": A boolean indicating whether the screen size is considered mobile.")),(0,r.kt)("h4",{id:"view-rendering"},"View Rendering"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"return (\n    <>\n        {isMobile && (\n            <Box sx={sx.chatMobileThreadsControls}>\n                <IconButton\n                    sx={{}}\n                    onClick={() => handleToggleChatThreads(true)}\n                >\n                    <Menu sx={{}} />\n                </IconButton>\n                <IconButton onClick={() => handleCreateNewChatThread()}>\n                    <Add sx={{}} />\n                </IconButton>\n            </Box>\n        )}\n        <Box sx={sx.container}>\n            <Box sx={sx.content}>\n                {showChatThreadsForAll && <>{chatThreadsIsLoading ? <ChatThreadsSkeleton /> : <ChatThreads />}</>}\n                {isLoadingChatThread ? (\n                    <ChatMessagesSkeleton />\n                ) : (\n                    <Box sx={sx.chat}>\n                        {activeChatThread ? (\n                            <Box\n                                sx={sx.chatMessages}\n                                ref={chatMessagesRef}\n                            >\n                                {(activeChatThread ? activeChatThread?.chatString : []).map((message) => (\n                                    <MessageItem\n                                        profilePhoto={profilePhoto}\n                                        key={message.timeStamp + message.content}\n                                        message={message}\n                                    />\n                                ))}\n                            </Box>\n                        ) : (\n                            <EmptyChat />\n                        )}\n                        <ChatControls />\n                    </Box>\n                )}\n            </Box>\n        </Box>\n    </>\n);\n")),(0,r.kt)("p",null,"The component's rendering logic consists of the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"isMobile")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),', it renders a mobile version of the chat thread controls with a menu button to toggle the\nchat threads and an "Add" button to create a new chat thread.'),(0,r.kt)("li",{parentName:"ol"},"It renders the main content of the chat interface inside a container."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"showChatThreadsForAll")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", it either renders a skeleton of chat threads or the actual chat threads\ndepending on whether they are loading or not."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"isLoadingChatThread")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", it renders a skeleton for chat messages. Otherwise, it renders the active chat\nthread's messages along with chat controls."),(0,r.kt)("li",{parentName:"ol"},"If there's an ",(0,r.kt)("inlineCode",{parentName:"li"},"activeChatThread"),", it maps through the ",(0,r.kt)("inlineCode",{parentName:"li"},"chatString")," array of the thread to render\nindividual ",(0,r.kt)("inlineCode",{parentName:"li"},"MessageItem")," components."),(0,r.kt)("li",{parentName:"ol"},"If there's no ",(0,r.kt)("inlineCode",{parentName:"li"},"activeChatThread"),", it renders the ",(0,r.kt)("inlineCode",{parentName:"li"},"EmptyChat")," component, indicating that no chat thread is selected."),(0,r.kt)("li",{parentName:"ol"},"Finally, it renders the ",(0,r.kt)("inlineCode",{parentName:"li"},"ChatControls")," component, allowing users to send messages.")),(0,r.kt)("h3",{id:"export"},"Export"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"export default memo(ChatPage);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatPage")," component is exported as a memoized component to optimize rendering performance."),(0,r.kt)("p",null,"This documentation provides an overview of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatPage")," component's structure, usage of hooks, and rendering logic. It\nforms the core of the chat functionality in the application, providing users with a seamless chat experience."))}d.isMDXComponent=!0}}]);