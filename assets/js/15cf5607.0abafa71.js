"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[1702],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=d(n),u=i,h=g["".concat(o,".").concat(u)]||g[u]||c[u]||s;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[g]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<s;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const s={},r=void 0,l={unversionedId:"Pages/Profile page/ProfilePageProvider",id:"Pages/Profile page/ProfilePageProvider",title:"ProfilePageProvider",description:"The ProfilePageProvider component is a React context provider that manages the state and logic related to a user's",source:"@site/docs/Pages/Profile page/ProfilePageProvider.md",sourceDirName:"Pages/Profile page",slug:"/Pages/Profile page/ProfilePageProvider",permalink:"/Pages/Profile page/ProfilePageProvider",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Pages/Profile page/ProfilePageProvider.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ProfilePage",permalink:"/Pages/Profile page/ProfilePage"}},o={},d=[{value:"Statics:",id:"statics",level:3},{value:"Hooks:",id:"hooks",level:3},{value:"Effects:",id:"effects",level:3},{value:"<code>useEffect</code> for Managing Favorite Listings",id:"useeffect-for-managing-favorite-listings",level:4},{value:"<code>useEffect</code> for Loading Initial Chat Threads List",id:"useeffect-for-loading-initial-chat-threads-list",level:4},{value:"<code>useEffect</code> for Managing Presets",id:"useeffect-for-managing-presets",level:4},{value:"<code>useEffect</code> for Managing Generated Images",id:"useeffect-for-managing-generated-images",level:4},{value:"<code>useEffect</code> for Managing Active Listing",id:"useeffect-for-managing-active-listing",level:4},{value:"Handlers:",id:"handlers",level:3},{value:"Context Value:",id:"context-value",level:3},{value:"Custom Hook:",id:"custom-hook",level:3},{value:"Usage:",id:"usage",level:3}],p={toc:d},g="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePageProvider")," component is a React context provider that manages the state and logic related to a user's\nprofile page. It encapsulates various pieces of functionality and data that are used within the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePage")," component,\nmaking them available to all the child components of ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePage"),". The component utilizes hooks, statics, and effects\nto achieve its functionality."),(0,i.kt)("h3",{id:"statics"},"Statics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": These static variables are extracted from the ",(0,i.kt)("inlineCode",{parentName:"li"},"auth")," object to get the current user's information\nand unique identifier (",(0,i.kt)("inlineCode",{parentName:"li"},"UID"),").")),(0,i.kt)("h3",{id:"hooks"},"Hooks:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"screenSize")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"isMobile"),": These hooks utilize the ",(0,i.kt)("inlineCode",{parentName:"p"},"useScreenSize")," custom hook to determine the screen size and\nwhether the user is on a mobile device.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"navigate"),": This hook is used to programmatically navigate the user to different routes within the application.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useParams"),": This hook retrieves parameters from the URL route.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useState"),": Several state variables are managed using this hook,\nincluding ",(0,i.kt)("inlineCode",{parentName:"p"},"chatThreads"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chatThreadsIsLoading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"presets"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"presetsIsLoading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"generatedImages"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"generatedImagesIsLoading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListings"),",\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"activeListing"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useFavoriteListings"),": This custom hook is used to fetch the user's favorite listings based on their ",(0,i.kt)("inlineCode",{parentName:"p"},"UID"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"useQuery"),": This hook is from the ",(0,i.kt)("inlineCode",{parentName:"p"},"react-query")," library and is used to fetch data asynchronously with caching and\ninvalidation."))),(0,i.kt)("h3",{id:"effects"},"Effects:"),(0,i.kt)("h4",{id:"useeffect-for-managing-favorite-listings"},(0,i.kt)("inlineCode",{parentName:"h4"},"useEffect")," for Managing Favorite Listings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useEffect(() => {\n  const favoriteListings = allListings?.filter((listing) => (favoriteListingsIds || []).includes(listing.Id));\n  setFavoriteListings(favoriteListings || []);\n}, [allListings, UID, favoriteListingsIds]);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Purpose:")," This effect is responsible for updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListings")," state, which contains a list of listings\nthat the user has marked as favorites. It filters ",(0,i.kt)("inlineCode",{parentName:"p"},"allListings")," based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListingsIds")," array, which stores\nthe unique IDs of the user's favorite listings. The filtered list is then set as the new value of ",(0,i.kt)("inlineCode",{parentName:"p"},"favoriteListings"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dependencies:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allListings"),": An array of all available listings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": The unique identifier of the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"favoriteListingsIds"),": An array of unique IDs representing the user's favorite listings.")),(0,i.kt)("h4",{id:"useeffect-for-loading-initial-chat-threads-list"},(0,i.kt)("inlineCode",{parentName:"h4"},"useEffect")," for Loading Initial Chat Threads List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useEffect(() => {\n  if (chatThreads.length === 0) {\n    ChatAPI.getChats(UID).then((chats) => {\n      setChatThreads(chats || []);\n    });\n  }\n\n  const chatThreadsRef = ref(db, `chatHistory/${UID}/`);\n  const onDataChange = (snapshot) => {\n    const data = snapshot.val();\n    const chatThreads = Object.values(data || {});\n\n    setChatThreads(chatThreads || []);\n    setChatThreadsIsLoading(false);\n  };\n\n  onValue(chatThreadsRef, onDataChange);\n\n  return () => {\n    off(chatThreadsRef, onDataChange);\n  };\n}, [UID, setChatThreads, setChatThreadsIsLoading]);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Purpose:")," This effect serves multiple purposes related to chat threads. It initially checks if ",(0,i.kt)("inlineCode",{parentName:"p"},"chatThreads")," is empty\nand, if so, fetches chat data using ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatAPI.getChats(UID)"),". It also sets up a real-time listener for changes in chat\ndata stored in Firebase using ",(0,i.kt)("inlineCode",{parentName:"p"},"onValue"),". When chat data changes, the listener updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"chatThreads")," state and\nindicates that loading is complete by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"setChatThreadsIsLoading")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dependencies:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": The unique identifier of the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setChatThreads"),": A function to set the chat threads."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setChatThreadsIsLoading"),": A function to indicate whether chat threads are still loading.")),(0,i.kt)("h4",{id:"useeffect-for-managing-presets"},(0,i.kt)("inlineCode",{parentName:"h4"},"useEffect")," for Managing Presets"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useEffect(() => {\n  if (!presets?.length) {\n    EditingImagesAPI.getPresets(UID).then((presets) => {\n      setPresets(presets || []);\n    });\n  }\n\n  const presetsRef = ref(db, `presets/${UID}/`);\n  const onDataChange = (snapshot) => {\n    const data = snapshot.val();\n    const newPresets = Object.values(data || {});\n\n    setPresets(newPresets || []);\n    setPresetsIsLoading(false);\n  };\n\n  onValue(presetsRef, onDataChange);\n\n  return () => {\n    off(presetsRef, onDataChange);\n  };\n}, [UID, setPresets, setPresetsIsLoading]);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Purpose:")," This effect manages user presets for image editing. It checks if ",(0,i.kt)("inlineCode",{parentName:"p"},"presets")," is empty and, if so, fetches\npresets data using ",(0,i.kt)("inlineCode",{parentName:"p"},"EditingImagesAPI.getPresets(UID)"),". It also sets up a real-time listener for changes in preset data\nstored in Firebase. When preset data changes, the listener updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"presets")," state and indicates that loading is\ncomplete by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"setPresetsIsLoading")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dependencies:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": The unique identifier of the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setPresets"),": A function to set the user's presets."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setPresetsIsLoading"),": A function to indicate whether presets are still loading.")),(0,i.kt)("h4",{id:"useeffect-for-managing-generated-images"},(0,i.kt)("inlineCode",{parentName:"h4"},"useEffect")," for Managing Generated Images"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useEffect(() => {\n  if (!generatedImages?.length) {\n    EditingImagesAPI.getGeneratedImages(UID).then((generatedImages) => {\n      setGeneratedImages(generatedImages || []);\n    });\n  }\n\n  const generatedImagesRef = ref(db, `generatedImages/${UID}/`);\n  const onDataChange = (snapshot) => {\n    const data = snapshot.val();\n    const newGeneratedImages = Object.values(data || {});\n\n    setGeneratedImages(newGeneratedImages || []);\n    setGeneratedImagesIsLoading(false);\n  };\n\n  onValue(generatedImagesRef, onDataChange);\n\n  return () => {\n    off(generatedImagesRef, onDataChange);\n  };\n}, [UID, setGeneratedImages, setGeneratedImagesIsLoading]);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Purpose:")," This effect manages generated images associated with the user. It checks if ",(0,i.kt)("inlineCode",{parentName:"p"},"generatedImages")," is empty and,\nif so, fetches generated image data using ",(0,i.kt)("inlineCode",{parentName:"p"},"EditingImagesAPI.getGeneratedImages(UID)"),". It also sets up a real-time\nlistener for changes in generated image data stored in Firebase. When generated image data changes, the listener updates\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"generatedImages")," state and indicates that loading is complete by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"setGeneratedImagesIsLoading")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dependencies:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UID"),": The unique identifier of the user."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setGeneratedImages"),": A function to set the user's generated images."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setGeneratedImagesIsLoading"),": A function to indicate whether generated images are still loading.")),(0,i.kt)("h4",{id:"useeffect-for-managing-active-listing"},(0,i.kt)("inlineCode",{parentName:"h4"},"useEffect")," for Managing Active Listing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useEffect(() => {\n  if (id) {\n    const currentActiveListing = allListings?.find((listing) => listing.Id === id);\n\n    if (!currentActiveListing) {\n      setActiveListing(null);\n      return;\n    }\n\n    if (id !== currentActiveListing.Id) {\n      setActiveListing(null);\n      return;\n    }\n\n    const activeListingsWithFilteredMedia =\n      currentActiveListing?.Media?.length > 1\n        ? {\n          isLiked: favoriteListingsIds.includes(currentActiveListing.Id),\n          ...currentActiveListing,\n          ...(currentActiveListing && { Media: currentActiveListing?.Media.slice(1, 6) }),\n        }\n        : {\n          isLiked: favoriteListingsIds.includes(currentActiveListing.Id),\n          ...currentActiveListing,\n          ...(currentActiveListing && { Media: currentActiveListing?.Media }),\n        };\n    setActiveListing(activeListingsWithFilteredMedia);\n  }\n}, [id, allListings, favoriteListingsIds]);\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Purpose:")," This effect is responsible for managing the active listing based on the provided ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),". It first attempts to\nfind the listing with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," within the ",(0,i.kt)("inlineCode",{parentName:"p"},"allListings")," array. If found, it filters the listing's media to include\nonly a subset of it, updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"activeListing")," state with additional information like whether it's liked (",(0,i.kt)("inlineCode",{parentName:"p"},"isLiked"),").\nIf the listing is not found or the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," doesn't match the listing's ",(0,i.kt)("inlineCode",{parentName:"p"},"Id"),", it sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"activeListing")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dependencies:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": The ID of the currently active listing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allListings"),": An array of all available listings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"favoriteListingsIds"),": An array of unique IDs representing the user's favorite listings.")),(0,i.kt)("p",null,"These ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hooks collectively manage various aspects of the user's profile data"),(0,i.kt)("h3",{id:"handlers"},"Handlers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleApplyFilter"),": This handler is called when a filter is applied. It sets the initial saved filter and navigates\nthe user to the editing page.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleToggleLikePreset"),': This handler is used to toggle the "like" status of an editing preset.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleToggleLikeGeneratedImage"),': This handler is used to toggle the "like" status of a generated image.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleToggleLikeListingItem"),': This handler is used to toggle the "like" status of a favorite listing.'))),(0,i.kt)("h3",{id:"context-value"},"Context Value:"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"contextValue")," is a combination of the various state variables, handlers, and other relevant data mentioned above.\nIt provides these values to child components through the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePageContext.Provider"),"."),(0,i.kt)("h3",{id:"custom-hook"},"Custom Hook:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"useProfilePage"),": This custom hook allows other components to easily access the context values provided by\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"ProfilePageProvider"),". It throws an error if used outside the scope of the provider.")),(0,i.kt)("h3",{id:"usage"},"Usage:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The component fetches and manages data related to chat threads, presets, generated images, and favorite listings."),(0,i.kt)("li",{parentName:"ol"},'It handles the navigation between different pages, like applying filters and toggling "like" status.'),(0,i.kt)("li",{parentName:"ol"},"It encapsulates the above logic and makes it available to its child components using the React context API.")),(0,i.kt)("p",null,"Overall, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProfilePageProvider")," is a complex component that centralizes the state management and logic related to a\nuser's profile page, making it easier to maintain and provide a consistent experience across different parts of the\napplication."))}c.isMDXComponent=!0}}]);