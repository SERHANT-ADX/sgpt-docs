"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[2599],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),c=o,g=u["".concat(l,".").concat(c)]||u[c]||m[c]||r;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={},i=void 0,s={unversionedId:"Components/ChatPage/ChatControls/ChatControls",id:"Components/ChatPage/ChatControls/ChatControls",title:"ChatControls",description:"The ChatControls component is responsible for rendering and managing the input controls for sending and regenerating",source:"@site/docs/Components/ChatPage/ChatControls/ChatControls.md",sourceDirName:"Components/ChatPage/ChatControls",slug:"/Components/ChatPage/ChatControls/",permalink:"/Components/ChatPage/ChatControls/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/ChatPage/ChatControls/ChatControls.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"App",permalink:"/App"},next:{title:"ChatThreads",permalink:"/Components/ChatPage/ChatThreads/"}},l={},p=[{value:"Component Overview",id:"component-overview",level:4},{value:"Component Structure",id:"component-structure",level:4},{value:"Props",id:"props",level:4},{value:"Hooks and Functions",id:"hooks-and-functions",level:4},{value:"Statics",id:"statics",level:4},{value:"Handlers",id:"handlers",level:4},{value:"JSX Rendering",id:"jsx-rendering",level:4},{value:"Export",id:"export",level:4}],d={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatControls")," component is responsible for rendering and managing the input controls for sending and regenerating\nmessages in a chat interface."),(0,o.kt)("h4",{id:"component-overview"},"Component Overview"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatControls")," component provides a form interface for sending and regenerating messages in a chat. It uses\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"formik")," library for form management and integrates with the ",(0,o.kt)("inlineCode",{parentName:"p"},"useChatPage")," custom hook to access chat-related\nfunctions and data."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Important!")," You can use this component only within ChatPageProvider Component"),(0,o.kt)("h4",{id:"component-structure"},"Component Structure"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatControls")," component is structured as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Private Definitions")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: generatingSmallAnimation,\n    rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice',\n    },\n};\n")),(0,o.kt)("p",{parentName:"li"},"This object defines animation options for the Lottie animation that plays while a response is being regenerated.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"ChatControls Component")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const ChatControls = () => {\n    // Hooks\n    const { handleSendMessage, isMessageLoading, handleRegenerateMessage, activeChatThread } = useChatPage();\n\n    // Statics\n    const initialFormValues = {\n        prompt: '',\n    };\n\n    // Handlers\n    const handleSubmitSending = useCallback(\n        (values, setFieldValue) => {\n            handleSendMessage(values.prompt);\n            setFieldValue('prompt', '');\n        },\n        [handleSendMessage],\n    );\n\n    const formik = useFormik({\n        initialValues: initialFormValues,\n        validationSchema: sendingChatRequestValidation,\n        onSubmit: (values) => handleSubmitSending(values, formik.setFieldValue),\n    });\n\n    const { handleSubmit, handleChange, values, errors } = formik;\n\n    const handleKeyDown = useCallback(\n        (event) => {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                handleSubmit();\n            }\n        },\n        [handleSubmit],\n    );\n\n    // JSX Rendering\n    return (\n        <form\n            onSubmit={handleSubmit}\n            style={sx.chatControls}\n        >\n            <Button\n                sx={\n                    isMessageLoading ? { ...sx.regenerateResponseButton, alignItems: 'center' } : sx.regenerateResponseButton\n                }\n                disabled={isMessageLoading || !activeChatThread}\n                onClick={handleRegenerateMessage}\n                endIcon={\n                    isMessageLoading ? (\n                        <Lottie\n                            options={defaultOptions}\n                            height={30}\n                            width={30}\n                        />\n                    ) : (\n                        <RegenerateResponseIcon />\n                    )\n                }\n            >\n                Regenerate response\n            </Button>\n            <TextField\n                name=\"prompt\"\n                value={values.prompt}\n                onChange={handleChange}\n                multiline\n                sx={sx.newMessageInput.sx}\n                inputProps={sx.newMessageInput.inputProps}\n                onKeyDown={handleKeyDown}\n                placeholder=\"Type your question here...\"\n                rows={5}\n                variant=\"outlined\"\n            />\n            <Tooltip title=\"Send\">\n                <IconButton\n                    sx={sx.sendMessageButton}\n                    style={{ ...((isMessageLoading || !!errors?.prompt) && { opacity: '60%' }) }}\n                    type=\"submit\"\n                    disabled={isMessageLoading || !!errors?.prompt}\n                >\n                    <img\n                        src={sendMessageIcon}\n                        alt=\"send\"\n                    />\n                </IconButton>\n            </Tooltip>\n        </form>\n    );\n};\n")))),(0,o.kt)("h4",{id:"props"},"Props"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatControls")," component does not receive any props directly."),(0,o.kt)("h4",{id:"hooks-and-functions"},"Hooks and Functions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Hooks Used:")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"useChatPage"),": Custom hook for accessing chat-related functions and data."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Functions Used:")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"handleSendMessage"),": Function to send a chat message."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"isMessageLoading"),": Boolean indicating if a message is currently being sent."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"handleRegenerateMessage"),": Function to regenerate a chat message."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"handleSubmitSending"),": Callback function to handle form submission for sending messages."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"formik.setFieldValue"),": Formik function to set field values.")))),(0,o.kt)("h4",{id:"statics"},"Statics"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"initialFormValues")),":\nInitial values for the form fields managed by Formik.")),(0,o.kt)("h4",{id:"handlers"},"Handlers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"handleSubmitSending(values, setFieldValue)")),":\nCallback function triggered when the form is submitted. Calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"handleSendMessage")," function to send the message and\nclears the input field value.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"handleKeyDown(event)")),":\nEvent handler triggered when a key is pressed. If the Enter key is pressed, it prevents the default action and\ntriggers the form submission."))),(0,o.kt)("h4",{id:"jsx-rendering"},"JSX Rendering"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatControls")," component returns a JSX structure that represents the input controls for sending and regenerating\nmessages in a chat. It includes buttons for regenerating responses and sending messages, as well as an input field for\nentering messages."),(0,o.kt)("h4",{id:"export"},"Export"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatControls")," component is exported as a memoized component using the ",(0,o.kt)("inlineCode",{parentName:"p"},"memo")," function."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"This documentation provides an in-depth understanding of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatControls")," component, its structure, functionality,\nhooks used, functions, handlers, and more."))}m.isMDXComponent=!0}}]);