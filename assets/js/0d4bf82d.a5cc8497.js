"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[9842],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return n?o.createElement(k,a(a({ref:t},c),{},{components:n})):o.createElement(k,a({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:r,a[1]=p;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1295:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const i={},a=void 0,p={unversionedId:"Components/CreateContentPage/PreviewBlocks/PreviewBlock",id:"Components/CreateContentPage/PreviewBlocks/PreviewBlock",title:"PreviewBlock",description:"The PreviewBlock component is a versatile component used to display previews of various content types based on the",source:"@site/docs/Components/CreateContentPage/PreviewBlocks/PreviewBlock.md",sourceDirName:"Components/CreateContentPage/PreviewBlocks",slug:"/Components/CreateContentPage/PreviewBlocks/PreviewBlock",permalink:"/Components/CreateContentPage/PreviewBlocks/PreviewBlock",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/CreateContentPage/PreviewBlocks/PreviewBlock.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ListingItem",permalink:"/Components/CreateContentPage/ListingItem/"},next:{title:"SocialMediaToggleCard",permalink:"/Components/CreateContentPage/SocialMediaToggleCard/"}},l={},s=[{value:"Props",id:"props",level:4},{value:"Example Usage",id:"example-usage",level:4},{value:"Component Structure",id:"component-structure",level:4},{value:"Components Used",id:"components-used",level:4},{value:"Memoization",id:"memoization",level:4},{value:"Overall Functionality",id:"overall-functionality",level:4}],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PreviewBlock")," component is a versatile component used to display previews of various content types based on the\nprovided ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),". It dynamically renders different preview components depending on the given ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," prop."),(0,r.kt)("h4",{id:"props"},"Props"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PreviewBlock")," component accepts the following props:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": A string representing the type of content preview to display (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"'facebook'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"'twitter'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"'instagram'"),",\netc.)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"image"),": An optional image URL to display in the preview."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"text"),": The content text to display in the preview.")),(0,r.kt)("h4",{id:"example-usage"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import PreviewBlock from './PreviewBlock'; // Import the component\nimport image from '../../../assets/images/placeholderImg.png';\n\nconst ContentPreview = () => {\n    const type = 'facebook';\n    const text = 'Sample content text...';\n\n    return (\n        <div>\n            <PreviewBlock\n                type={type}\n                image={image}\n                text={text}\n            />\n        </div>\n    );\n};\n")),(0,r.kt)("h4",{id:"component-structure"},"Component Structure"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PreviewBlock")," component is structured as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"User and Profile Information:")," The user's display name and profile photo are retrieved from the ",(0,r.kt)("inlineCode",{parentName:"p"},"auth.currentUser"),"\nobject.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Component Mapping:")," The component uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"componentMap")," object to map different ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," values to their\ncorresponding preview components. This mapping allows the component to dynamically determine which preview component\nto render based on the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Rendering:")," The component conditionally renders the selected preview component based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),". If a matching\ncomponent is found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"componentMap"),", it is instantiated and passed the necessary props for rendering. If no\nmatching component is found, ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," is returned."))),(0,r.kt)("h4",{id:"components-used"},"Components Used"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PreviewBlock")," component dynamically renders various content preview components, such\nas ",(0,r.kt)("inlineCode",{parentName:"p"},"FacebookPreview"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TwitterPreview"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"InstagramPreview"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TiktokPreview"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"BlogPostPreview"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"EmailPreview"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ListingDescription"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"VideoscriptPreview"),". The choice of which component to render depends on the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," prop."),(0,r.kt)("h4",{id:"memoization"},"Memoization"),(0,r.kt)("p",null,"The component is memoized using the ",(0,r.kt)("inlineCode",{parentName:"p"},"memo")," function from React to optimize re-renders when the props do not change."),(0,r.kt)("h4",{id:"overall-functionality"},"Overall Functionality"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"PreviewBlock")," component provides a flexible and reusable way to display different types of content previews. It\nencapsulates the logic for selecting and rendering the appropriate preview component based on the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),". This\ncomponent is well-suited for content creation applications and platforms where users can preview different types of\ncontent before publishing."))}d.isMDXComponent=!0}}]);