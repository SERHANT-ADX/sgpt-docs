"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[4701],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},h=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),c=l(a),d=r,u=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return a?n.createElement(u,s(s({ref:t},h),{},{components:a})):n.createElement(u,s({ref:t},h))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3709:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const o={},s=void 0,i={unversionedId:"Components/ChatPage/ChatThreads/ChatThreads",id:"Components/ChatPage/ChatThreads/ChatThreads",title:"ChatThreads",description:"ChatThreads Component",source:"@site/docs/Components/ChatPage/ChatThreads/ChatThreads.md",sourceDirName:"Components/ChatPage/ChatThreads",slug:"/Components/ChatPage/ChatThreads/",permalink:"/Components/ChatPage/ChatThreads/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/ChatPage/ChatThreads/ChatThreads.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ChatControls",permalink:"/Components/ChatPage/ChatControls/"},next:{title:"MessageItem",permalink:"/Components/ChatPage/MessageItem/"}},p={},l=[{value:"ChatThreads Component",id:"chatthreads-component",level:3},{value:"Props",id:"props",level:4},{value:"Return Value",id:"return-value",level:4},{value:"Usage",id:"usage",level:4},{value:"Component Structure",id:"component-structure",level:4},{value:"Example",id:"example",level:4}],h={toc:l},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"chatthreads-component"},"ChatThreads Component"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatThreads")," component is responsible for displaying a list of chat threads categorized by date. It allows users to\nselect and manage chat threads. This component is used in the chat interface to provide an overview of available chat\nconversations."),(0,r.kt)("h4",{id:"props"},"Props"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatThreads")," component does not receive any external props."),(0,r.kt)("h4",{id:"return-value"},"Return Value"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatThreads")," component returns a JSX structure representing the chat threads interface. It displays a list of chat\nthreads organized by date, along with buttons for clearing threads and creating new chats."),(0,r.kt)("h4",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatThreads")," component, follow these steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Import the required components and utilities:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import { sx } from './chatThreads.sx';\nimport { Box, Button, IconButton, Typography } from '@mui/material';\nimport { AddBoxOutlined, CloseOutlined, Delete } from '@mui/icons-material';\nimport { createTimeCategoriesForChats } from '../../../utils/chat/createTimeCategoriesForChats';\nimport { useMemo } from 'react';\nimport { useChatPage } from '../../../pages/ChatPage/ChatPageProvider';\nimport { memo } from 'react';\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Define the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatThreads")," component:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const ChatThreads = () => {\n    // Hooks and usage\n    // ... chatThreads component code ...\n};\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Retrieve necessary data and functions from the ",(0,r.kt)("inlineCode",{parentName:"p"},"useChatPage")," context using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useChatPage")," hook:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const {\n    activeChatThread,\n    chatThreads = [],\n    handleChooseChatThread,\n    isMobile = false,\n    handleToggleChatThreads,\n    handleCreateNewChatThread,\n    handleDeleteAllChatThreads,\n} = useChatPage();\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Calculate time-based categories for chat threads using ",(0,r.kt)("inlineCode",{parentName:"p"},"createTimeCategoriesForChats")," utility function:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const dateChatCategories = useMemo(() => {\n    return createTimeCategoriesForChats(chatThreads);\n}, [chatThreads]);\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Filter out empty date categories:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const filteredDateChatCategories = useMemo(() => {\n    return Object.entries(dateChatCategories).filter(([_, chatThreads]) => chatThreads.length > 0);\n}, [dateChatCategories]);\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Render the component structure with categorized chat threads:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"return (\n    <Box sx={sx.chatThreadsWrapper}>\n        <Box sx={sx.content}>\n            {/* ... header block ... */}\n            <Box sx={sx.chatThreads}>\n                {filteredDateChatCategories.map(([date, chats]) => (\n                    <Box key={date}>\n                        {/* ... time group label ... */}\n                        {chats.map((chatThread) => (\n                            <Box\n                                key={chatThread.id}\n                                onClick={() => handleChooseChatThread(chatThread.id)}\n                                sx={sx.chatThreadItem}\n                            >\n                                {/* ... chat thread item ... */}\n                            </Box>\n                        ))}\n                    </Box>\n                ))}\n            </Box>\n        </Box>\n        <Box sx={sx.chatThreadsControls}>{/* ... clear and create buttons ... */}</Box>\n    </Box>\n);\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Finally, export the component using ",(0,r.kt)("inlineCode",{parentName:"p"},"memo")," to optimize rendering:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"export default memo(ChatThreads);\n")))),(0,r.kt)("h4",{id:"component-structure"},"Component Structure"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatThreads")," component consists of the following sections:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Header Block"),': Displays the title "Chat threads" and a close button if viewed on mobile devices.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Chat Threads"),": Lists chat threads categorized by date. Each date category contains a list of chat threads.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Chat Thread Item"),": Represents an individual chat thread. It displays the truncated chat name and highlights the\nactive chat thread.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Chat Threads Controls"),": Contains buttons for clearing all chat threads and creating a new chat thread."))),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("p",null,"Here's a basic example of how you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatThreads")," component in a parent component:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important!")," You can use this component only within ChatPageProvider Component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import React from 'react';\nimport ChatThreads from './ChatThreads';\n\nconst ChatPage = () => {\n    // ... other code ...\n\n    return (\n        <div>\n            {/* ... other components ... */}\n            <ChatThreads />\n        </div>\n    );\n};\n\nexport default ChatPage;\n")))}m.isMDXComponent=!0}}]);