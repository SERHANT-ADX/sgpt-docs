"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[7716],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?o.createElement(k,r(r({ref:t},u),{},{components:n})):o.createElement(k,r({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5649:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const i={},r=void 0,l={unversionedId:"Pages/Layout/LayoutProvider",id:"Pages/Layout/LayoutProvider",title:"LayoutProvider",description:"The LayoutProvider component serves as a provider for the application's context, which includes various states and",source:"@site/docs/Pages/Layout/LayoutProvider.md",sourceDirName:"Pages/Layout",slug:"/Pages/Layout/LayoutProvider",permalink:"/sgpt-docs/Pages/Layout/LayoutProvider",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Pages/Layout/LayoutProvider.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DataResolver",permalink:"/sgpt-docs/Pages/Layout/DataResolver"},next:{title:"ListingItemPage",permalink:"/sgpt-docs/Pages/Listing item page/ListingItemPage"}},s={},p=[{value:"Imports",id:"imports",level:3},{value:"AppContextProvider Context",id:"appcontextprovider-context",level:3},{value:"LayoutProvider Component",id:"layoutprovider-component",level:3},{value:"Hooks and States",id:"hooks-and-states",level:4},{value:"useGetAllListings Hook",id:"usegetalllistings-hook",level:4},{value:"Context Value",id:"context-value",level:4},{value:"Rendering",id:"rendering",level:4},{value:"useAppProvider Hook",id:"useappprovider-hook",level:3},{value:"Export",id:"export",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutProvider")," component serves as a provider for the application's context, which includes various states and\nfunctions related to the layout and application state."),(0,a.kt)("h3",{id:"imports"},"Imports"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import AuthorizationLayer from '../AuthorizationLayer/AuthorizationLayer';\nimport { createContext, useContext, useMemo, useState } from 'react';\nimport useScreenSize from '../../hooks/useScreenSize/useScreenSize';\nimport { memo } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AuthorizationLayer"),": A component for handling user authorization and authentication."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"createContext"),": A function to create a new context."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useContext"),": A hook to access the context."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useMemo"),": A hook to memoize values and functions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useState"),": A hook to manage component state."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useScreenSize"),": A custom hook to track the current screen size."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"memo"),": A function to memoize a component for performance optimization."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ToastContainer"),": A component for displaying toast notifications.")),(0,a.kt)("h3",{id:"appcontextprovider-context"},"AppContextProvider Context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const AppContextProvider = createContext(null);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AppContextProvider"),": A context that holds the application-level state and functions.")),(0,a.kt)("h3",{id:"layoutprovider-component"},"LayoutProvider Component"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"LayoutProvider")," component serves as the main provider for the application's context. It encapsulates the ",(0,a.kt)("inlineCode",{parentName:"p"},"Layout"),"\ncomponent within the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthorizationLayer")," and provides the context to child components."),(0,a.kt)("h4",{id:"hooks-and-states"},"Hooks and States"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const screenSize = useScreenSize();\nconst isMobile = useMemo(() => screenSize === 'xs' || screenSize === 's', [screenSize]);\n\nconst [currentPage, setCurrentPage] = useState(1);\nconst [rooms, setRooms] = useState([]);\n\nconst [isFilterModalOpen, setIsFilterModalOpen] = useState(false);\nconst [isAddingModalOpen, setIsAddingModalOpen] = useState(false);\nconst [regions, setRegions] = useState(null);\nconst [filterOptions, setFilterOptions] = useState(null);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"screenSize"),": The current screen size, determined using the ",(0,a.kt)("inlineCode",{parentName:"li"},"useScreenSize")," hook."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isMobile"),": A boolean value indicating whether the screen size is considered mobile."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"currentPage"),": The current page number."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setCurrentPage"),": A function to set the current page number."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rooms"),": An array holding the current list of rooms."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setRooms"),": A function to set the list of rooms."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isFilterModalOpen"),": A boolean indicating whether the filter modal is open."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setIsFilterModalOpen"),": A function to control the visibility of the filter modal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isAddingModalOpen"),": A boolean indicating whether the adding modal is open."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setIsAddingModalOpen"),": A function to control the visibility of the adding modal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"regions"),": A state to hold regions data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setRegions"),": A function to set the regions data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filterOptions"),": A state to hold filter options data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setFilterOptions"),": A function to set the filter options data.")),(0,a.kt)("h4",{id:"usegetalllistings-hook"},"useGetAllListings Hook"),(0,a.kt)("p",null,"Make initial value of all listings during authorization checking to show users listings faster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useGetAllListings();\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"useQuery")," hook is used to fetch room data based on certain query conditions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"queryKey"),": An array representing the query's unique key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"queryFn"),": The function responsible for fetching data from the server."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"getFilterOptionsBody")," function generates filter options, and the ",(0,a.kt)("inlineCode",{parentName:"li"},"RoomsAPI.getRoomsPost")," method is used to fetch\nrooms data.")),(0,a.kt)("h4",{id:"context-value"},"Context Value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const contextValue = useMemo(() => {\n  return {\n    isFilterModalOpen,\n    setIsFilterModalOpen,\n    isAddingModalOpen,\n    setIsAddingModalOpen,\n    regions,\n    setRegions,\n    filterOptions,\n    setFilterOptions,\n    isMobile,\n    currentPage,\n    setCurrentPage,\n    rooms,\n    setRooms,\n  };\n}, [...]);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"contextValue"),": A memoized object containing context values and functions."),(0,a.kt)("li",{parentName:"ul"},"The context value includes the states and functions required for the application.")),(0,a.kt)("h4",{id:"rendering"},"Rendering"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},'return (\n    <>\n        <AppContextProvider.Provider value={contextValue}>\n            <AuthorizationLayer>\n                <Layout />\n            </AuthorizationLayer>\n        </AppContextProvider.Provider>\n        <ToastContainer\n            position="top-right"\n            autoClose={6000}\n            hideProgressBar={false}\n            newestOnTop\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n        />\n    </>\n);\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"AppContextProvider.Provider")," wraps the ",(0,a.kt)("inlineCode",{parentName:"li"},"AuthorizationLayer")," component, which in turn wraps the ",(0,a.kt)("inlineCode",{parentName:"li"},"Layout"),"\ncomponent."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"contextValue")," is passed as the value of the context provider."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"ToastContainer")," component is used for displaying toast notifications.")),(0,a.kt)("h3",{id:"useappprovider-hook"},"useAppProvider Hook"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const useAppProvider = () => {\n    const context = useContext(AppContextProvider);\n    if (!context) {\n        throw new Error('useAppProvider must be used within a LayoutProvider');\n    }\n    return context;\n};\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useAppProvider")," is a custom hook for conveniently accessing the context values from components.")),(0,a.kt)("h3",{id:"export"},"Export"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"export default memo(LayoutProvider);\nexport { useAppProvider };\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"LayoutProvider")," component is exported as a memoized component to optimize rendering performance."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"useAppProvider"),' hook is exported to provide easy access to the context values."')))}d.isMDXComponent=!0}}]);