"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[3989],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=i,u=d["".concat(l,".").concat(g)]||d[g]||m[g]||a;return n?o.createElement(u,r(r({ref:t},c),{},{components:n})):o.createElement(u,r({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const a={},r=void 0,s={unversionedId:"Pages/Create content page/CreateContentPage",id:"Pages/Create content page/CreateContentPage",title:"CreateContentPage",description:"The CreateContentPage component provides users with a user interface to create and preview content using various",source:"@site/docs/Pages/Create content page/CreateContentPage.md",sourceDirName:"Pages/Create content page",slug:"/Pages/Create content page/CreateContentPage",permalink:"/Pages/Create content page/CreateContentPage",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Pages/Create content page/CreateContentPage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ChatPageProvider",permalink:"/Pages/Chat page/ChatPageProvider"},next:{title:"CreateContentPageProvider",permalink:"/Pages/Create content page/CreateContentPageProvider"}},l={},p=[{value:"Imports",id:"imports",level:3},{value:"CreateContentPage Component",id:"createcontentpage-component",level:3},{value:"Hooks",id:"hooks",level:4},{value:"Handlers",id:"handlers",level:4},{value:"View Rendering",id:"view-rendering",level:4},{value:"Listings Block",id:"listings-block",level:4},{value:"Create Content Block",id:"create-content-block",level:4},{value:"Preview Content Block",id:"preview-content-block",level:4},{value:"Export",id:"export",level:3}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateContentPage")," component provides users with a user interface to create and preview content using various\noptions. It includes features like selecting a social media platform, generating responses from prompts, choosing\nlistings, and previewing the generated content."),(0,i.kt)("h3",{id:"imports"},"Imports"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import { Box, Button, MenuItem, Select, TextField, Typography } from '@mui/material';\nimport ListingItem from '../../components/CreateContentPage/ListingItem/ListingItem';\nimport { socialMediaButtonsProps } from '../../utils/creationContent/socialMediaTypes';\nimport { AddBoxOutlined } from '@mui/icons-material';\nimport sx from './createContentPage.sx';\nimport SocialMediaToggleCard from '../../components/CreateContentPage/SocialMediaToggleCard/SocialMediaToggleCard';\nimport { memo, useCallback, useMemo } from 'react';\nimport PreviewBlock from '../../components/CreateContentPage/PreviewBlocks/PreviewBlock';\nimport GenerationContentModal from '../../components/Modals/GenerationContentModal/GenerationContentModal';\nimport GeneratedResponseCard from '../../components/CreateContentPage/GeneratedResponseCard/GeneratedResponseCard';\nimport AddingListingsModal from '../../components/Modals/AddingListingsModal/AddingListingsModal';\nimport { getRandomPromptAdjective, promptAdjectives } from '../../utils/creationContent/promptAdjectives';\nimport ChosenListingsSkeleton from '../../components/Skeletons/ChosenListingsSkeleton';\nimport GeneratedResponseSkeleton from '../../components/Skeletons/GeneratedCardSkeleton';\nimport Loader from '../../components/UI/Loader/Loader';\nimport { useCreateContentPage } from './CreateContentPageProvider';\n")),(0,i.kt)("h3",{id:"createcontentpage-component"},"CreateContentPage Component"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateContentPage")," component allows users to create and preview content with various options."),(0,i.kt)("h4",{id:"hooks"},"Hooks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const {\n    socialMediaType,\n    setSocialMediaType,\n    showContentChoice,\n    setShowContentChoice,\n    showListings,\n    setShowListings,\n    prevListings,\n    initialPrompt,\n    generatedResponses,\n    setInitialPrompt,\n    handleCreatePost,\n    handleRegenerateResponse,\n    isLoading,\n    chosenItem,\n    chosenGeneratedResponse,\n    setChosenGeneratedResponse,\n    setIsAddingModalOpen,\n    promptAdjective,\n    setPromptAdjective,\n    setChosenItem,\n    isLoadingListings,\n    isMobile,\n} = useCreateContentPage();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"socialMediaType"),": The selected social media type (e.g., Facebook, Twitter)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setSocialMediaType"),": A function to update the selected social media type."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"showContentChoice"),": A boolean indicating whether the content type choices are visible."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setShowContentChoice"),": A function to toggle the visibility of content type choices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"showListings"),": A boolean indicating whether the listings are visible."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setShowListings"),": A function to toggle the visibility of listings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prevListings"),": An array of previous listings to choose from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initialPrompt"),": The initial prompt for generating content."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"generatedResponses"),": An array of generated responses based on the prompt."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setInitialPrompt"),": A function to set the initial prompt."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleCreatePost"),": A function to create content based on the prompt."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleRegenerateResponse"),": A function to regenerate a response."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isLoading"),": A boolean indicating whether content is being generated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chosenItem"),": The chosen listing item."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chosenGeneratedResponse"),": The chosen generated response."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setChosenGeneratedResponse"),": A function to set the chosen generated response."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setIsAddingModalOpen"),': A function to open the "Adding Listings" modal.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"promptAdjective"),': The selected prompt adjective (e.g., "positive", "random").'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setPromptAdjective"),": A function to set the selected prompt adjective."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setChosenItem"),": A function to set the chosen listing item."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isLoadingListings"),": A boolean indicating whether listings are being loaded."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isMobile"),": A boolean indicating whether the screen size is considered mobile.")),(0,i.kt)("h4",{id:"handlers"},"Handlers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const chosenItemPhoto = useMemo(() => {\n    const chosenItemObj = prevListings.find((listing) => listing.Id === chosenItem);\n    return chosenItemObj?.Media[0];\n}, [chosenItem, prevListings]);\n\nconst handleSocialMediaToggle = useCallback(\n    (type) => {\n        setSocialMediaType(type);\n    },\n    [setSocialMediaType],\n);\n\nconst isLoadingListingsMemoized = useMemo(() => isLoadingListings, [isLoadingListings]);\nconst chosenGeneratedResponseMemoized = useMemo(() => chosenGeneratedResponse, [chosenGeneratedResponse]);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chosenItemPhoto"),": A memoized value of the media associated with the chosen listing item."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleSocialMediaToggle"),": A callback function to toggle the selected social media type."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isLoadingListingsMemoized"),": A memoized value indicating whether listings are loading."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chosenGeneratedResponseMemoized"),": A memoized value of the chosen generated response.")),(0,i.kt)("h4",{id:"view-rendering"},"View Rendering"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"return (\n    <>\n        <AddingListingsModal />\n        <GenerationContentModal isOpen={isLoading} />\n        <Box sx={sx.container}>\n            <Box sx={sx.content}>\n                {/* Listings Block */}\n                <Box sx={sx.listingsBlock}>{/* ... (listings content) ... */}</Box>\n\n                {/* Create Content Block */}\n                <Box sx={sx.createContentBlock}>{/* ... (create content section) ... */}</Box>\n\n                {/* Preview Content Block */}\n                <Box sx={sx.previewContentBlock}>{/* ... (preview content section) ... */}</Box>\n            </Box>\n        </Box>\n    </>\n);\n")),(0,i.kt)("p",null,"The component is divided into several blocks:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Listings Block"),': Displays the listings, toggle to show/hide, and an "Add listing" button.'),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Create Content Block"),": Displays content creation options including content type choice, initial prompt, and\ngenerated responses."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Preview Content Block"),": Displays a preview of the generated content.")),(0,i.kt)("h4",{id:"listings-block"},"Listings Block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"<Box sx={sx.listingsBlock}>{/* ... (listings content) ... */}</Box>\n")),(0,i.kt)("p",null,'The Listings Block includes the listing items, a button to add new listings, and an "Adding Listings" modal.'),(0,i.kt)("h4",{id:"create-content-block"},"Create Content Block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"<Box sx={sx.createContentBlock}>{/* ... (create content section) ... */}</Box>\n")),(0,i.kt)("p",null,"The Create Content Block includes options for content creation, such as content type choice, initial prompt, and\ngenerated responses."),(0,i.kt)("h4",{id:"preview-content-block"},"Preview Content Block"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"<Box sx={sx.previewContentBlock}>{/* ... (preview content section) ... */}</Box>\n")),(0,i.kt)("p",null,"The Preview Content Block displays a preview of the generated content."),(0,i.kt)("h3",{id:"export"},"Export"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"export default memo(CreateContentPage);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateContentPage")," component is exported as a memoized component to optimize rendering performance."),(0,i.kt)("p",null,"This documentation provides a comprehensive overview of the ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateContentPage")," component's structure, usage of hooks,\nhandlers, and rendering logic. It serves as a key component for users to generate and preview content based on various\noptions."))}m.isMDXComponent=!0}}]);