"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[7248],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),l=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},h=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=l(a),u=r,m=p["".concat(d,".").concat(u)]||p[u]||c[u]||i;return a?n.createElement(m,s(s({ref:t},h),{},{components:a})):n.createElement(m,s({ref:t},h))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3757:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={},s=void 0,o={unversionedId:"Hooks/useGetChatThreads",id:"Hooks/useGetChatThreads",title:"useGetChatThreads",description:"The useGetChatThreads custom hook is designed for fetching and managing chat threads data from a Firebase Realtime Database. This hook is intended to be used in a React application and provides functionality for loading initial chat threads and subscribing to real-time updates.",source:"@site/docs/Hooks/useGetChatThreads.md",sourceDirName:"Hooks",slug:"/Hooks/useGetChatThreads",permalink:"/sgpt-docs/Hooks/useGetChatThreads",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Hooks/useGetChatThreads.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useGetAllListings",permalink:"/sgpt-docs/Hooks/useGetAllListings"},next:{title:"useGetDetailedListing",permalink:"/sgpt-docs/Hooks/useGetDetailedListing"}},d={},l=[{value:"Usage",id:"usage",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Example Usage",id:"example-usage",level:3}],h={toc:l},p="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetChatThreads")," custom hook is designed for fetching and managing chat threads data from a Firebase Realtime Database. This hook is intended to be used in a React application and provides functionality for loading initial chat threads and subscribing to real-time updates."),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import useGetChatThreads from './useGetChatThreads';\n\n// Inside a functional component\nuseGetChatThreads({\n  chatThreads,\n  setChatThreads,\n  setChatThreadsIsLoading,\n  UID,\n  depsList,\n});\n")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chatThreads")," (Array): An array representing the current chat threads that you want to update."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setChatThreads")," (Function): A function used to update the chat threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setChatThreadsIsLoading")," (Function): A function used to set the loading state of chat threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UID")," (String): A unique identifier, typically representing a user, to retrieve their chat threads."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"depsList")," (Array): A dependency array, which specifies the dependencies for when the effect should run. This is typically used to control when the hook should fetch and update chat threads.")),(0,r.kt)("h3",{id:"return-value"},"Return Value"),(0,r.kt)("p",null,"This custom hook doesn't return any value directly. Instead, it internally manages the state of chat threads and their loading status through the provided functions (",(0,r.kt)("inlineCode",{parentName:"p"},"setChatThreads")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setChatThreadsIsLoading"),")."),(0,r.kt)("h3",{id:"functionality"},"Functionality"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Importing Dependencies"),": The hook begins by importing the necessary dependencies such as ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect")," for side effects, ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatAPI")," for initial chat thread data fetching, and Firebase Realtime Database functions (",(0,r.kt)("inlineCode",{parentName:"p"},"off"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ref"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"db"),") for subscribing to real-time updates.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Defining the Custom Hook"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetChatThreads")," function is defined, which takes several parameters to set up and manage chat thread data.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Initial Chat Threads Loading"),": The hook checks if the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatThreads")," array is empty. If it is, it fetches initial chat threads using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatAPI.getChats")," function, passing the user's ",(0,r.kt)("inlineCode",{parentName:"p"},"UID"),". This is typically done only once when the component mounts.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Real-time Updates Subscription"),": It sets up a Firebase Realtime Database reference to the chat threads specific to the user's ",(0,r.kt)("inlineCode",{parentName:"p"},"UID"),". It defines an ",(0,r.kt)("inlineCode",{parentName:"p"},"onDataChange")," function that is called whenever the data at the reference location changes. Inside this function, it updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"chatThreads")," state with the latest chat threads data obtained from the snapshot.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Cleanup"),": The hook returns a cleanup function that unsubscribes from real-time updates by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"off")," on the reference when the component unmounts.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Effect Dependency"),": The effect is run whenever any of the dependencies in the ",(0,r.kt)("inlineCode",{parentName:"p"},"depsList")," array change. This allows you to control when the hook fetches and updates chat threads based on changes in the provided dependencies."))),(0,r.kt)("h3",{id:"example-usage"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import React, { useState } from 'react';\nimport useGetChatThreads from './useGetChatThreads';\n\nfunction ChatComponent() {\n  const [chatThreads, setChatThreads] = useState([]);\n  const [chatThreadsIsLoading, setChatThreadsIsLoading] = useState(true);\n  const UID = 'user123'; // Replace with the actual user's UID\n\n  // Provide dependencies to control when the effect should run\n  const depsList = [UID];\n\n  useGetChatThreads({\n    chatThreads,\n    setChatThreads,\n    setChatThreadsIsLoading,\n    UID,\n    depsList,\n  });\n\n  // Render chat threads and loading state\n  return (\n    <div>\n      {chatThreadsIsLoading ? (\n        <div>Loading chat threads...</div>\n      ) : (\n        <ul>\n          {chatThreads.map((thread) => (\n            <li key={thread.id}>{thread.title}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default ChatComponent;\n")),(0,r.kt)("p",null,"In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetChatThreads")," hook is used to manage chat threads data within a React component, and it handles both initial data loading and real-time updates from Firebase Realtime Database."))}c.isMDXComponent=!0}}]);