"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[8154],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={},s=void 0,o={unversionedId:"Hooks/useGetAllListings",id:"Hooks/useGetAllListings",title:"useGetAllListings",description:"The useGetAllListings custom hook is designed to fetch a list of listings/rooms data, typically used in a React application. It utilizes the @tanstack/react-query library for data fetching and caching. This hook provides information about the loading status, fetched data, and potential errors while retrieving the listings.",source:"@site/docs/Hooks/useGetAllListings.md",sourceDirName:"Hooks",slug:"/Hooks/useGetAllListings",permalink:"/sgpt-docs/Hooks/useGetAllListings",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Hooks/useGetAllListings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useGenerateImage",permalink:"/sgpt-docs/Hooks/useGenerateImage"},next:{title:"useGetChatThreads",permalink:"/sgpt-docs/Hooks/useGetChatThreads"}},l={},p=[{value:"Usage",id:"usage",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Return Values",id:"return-values",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Example Usage",id:"example-usage",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetAllListings")," custom hook is designed to fetch a list of listings/rooms data, typically used in a React application. It utilizes the ",(0,i.kt)("inlineCode",{parentName:"p"},"@tanstack/react-query")," library for data fetching and caching. This hook provides information about the loading status, fetched data, and potential errors while retrieving the listings."),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import useGetAllListings from './useGetAllListings';\n\n// Inside a functional component\nconst { listingsIsLoading, allListings, allListingsError } = useGetAllListings();\n")),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"This custom hook doesn't take any parameters."),(0,i.kt)("h3",{id:"return-values"},"Return Values"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"listingsIsLoading")," (Boolean): Indicates whether the data is currently being fetched (true) or not (false)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allListings")," (Array or null): An array containing the retrieved listings/rooms data or null if the data hasn't been fetched yet."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allListingsError")," (Object or null): An error object containing details about any error that occurred during the data fetching process, or null if there were no errors.")),(0,i.kt)("h3",{id:"functionality"},"Functionality"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Importing Dependencies"),": The hook starts by importing necessary dependencies like ",(0,i.kt)("inlineCode",{parentName:"p"},"toast")," for displaying notifications, ",(0,i.kt)("inlineCode",{parentName:"p"},"RoomsAPI")," for making API requests, and ",(0,i.kt)("inlineCode",{parentName:"p"},"@tanstack/react-query")," for handling data fetching.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Defining the Custom Hook"),": The ",(0,i.kt)("inlineCode",{parentName:"p"},"useGetAllListings")," function is defined, which will be used to fetch the listings data.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Using ",(0,i.kt)("inlineCode",{parentName:"strong"},"useQuery")),": Inside the custom hook, the ",(0,i.kt)("inlineCode",{parentName:"p"},"useQuery")," hook from ",(0,i.kt)("inlineCode",{parentName:"p"},"@tanstack/react-query")," is used to perform the actual data fetching. It takes an object with various properties:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"queryKey"),": This specifies a unique key for this query. In this case, it's an array with a key named ",(0,i.kt)("inlineCode",{parentName:"p"},"'getListingsRooms'")," and an object containing ",(0,i.kt)("inlineCode",{parentName:"p"},"filterOptions"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"regions"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"showOnlyAgentsListings")," set to default or null values.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"queryFn"),": This is an async function that performs the actual data retrieval. It uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"RoomsAPI.getRoomsPost")," method to fetch room listings. It also applies filter options and other parameters as needed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"onError"),": This function handles any errors that might occur during the data fetching process. It displays an error notification using ",(0,i.kt)("inlineCode",{parentName:"p"},"toast.error")," and logs the error to the console.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Return Values"),": The hook returns three values - ",(0,i.kt)("inlineCode",{parentName:"p"},"listingsIsLoading"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"allListings"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"allListingsError"),". These values can be used in a React component to handle loading states and display data or errors as needed."))),(0,i.kt)("h3",{id:"example-usage"},"Example Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import useGetAllListings from './useGetAllListings';\n\nfunction ListingsComponent() {\n  const { listingsIsLoading, allListings, allListingsError } = useGetAllListings();\n\n  if (listingsIsLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (allListingsError) {\n    return <div>Error: {allListingsError.message}</div>;\n  }\n\n  return (\n    <div>\n      {allListings.map((listing) => (\n        <div key={listing.id}>{listing.name}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default ListingsComponent;\n")),(0,i.kt)("p",null,"In this example, the hook is used within a React component to handle the loading and error states and display the fetched data when available."))}c.isMDXComponent=!0}}]);