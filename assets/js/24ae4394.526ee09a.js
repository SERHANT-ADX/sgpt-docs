"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[4991],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=m(n),d=s,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(g,o(o({ref:t},l),{},{components:n})):a.createElement(g,o({ref:t},l))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:s,o[1]=i;for(var m=2;m<r;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=n(7462),s=(n(7294),n(3905));const r={},o=void 0,i={unversionedId:"Components/ChatPage/MessageItem/MessageItem",id:"Components/ChatPage/MessageItem/MessageItem",title:"MessageItem",description:"The MessageItem component is responsible for displaying an individual message within a chat conversation. It includes",source:"@site/docs/Components/ChatPage/MessageItem/MessageItem.md",sourceDirName:"Components/ChatPage/MessageItem",slug:"/Components/ChatPage/MessageItem/",permalink:"/Components/ChatPage/MessageItem/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/ChatPage/MessageItem/MessageItem.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ChatThreads",permalink:"/Components/ChatPage/ChatThreads/"},next:{title:"AvatarAndNameForPreview",permalink:"/Components/CreateContentPage/AvatarAndNameForPreview/"}},p={},m=[{value:"Props",id:"props",level:4},{value:"Return Value",id:"return-value",level:4},{value:"Usage",id:"usage",level:4},{value:"Component Structure",id:"component-structure",level:4},{value:"Example",id:"example",level:4}],l={toc:m},c="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(c,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageItem")," component is responsible for displaying an individual message within a chat conversation. It includes\nthe sender's avatar, message content, and the option to copy the message content to the clipboard. This component is\nused to represent messages exchanged between the user and the chatbot."),(0,s.kt)("h4",{id:"props"},"Props"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"message"),": The message object containing information about the message, such as content and sender role."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"profilePhoto"),": The URL of the user's profile photo. Defaults to an empty string if not provided.")),(0,s.kt)("h4",{id:"return-value"},"Return Value"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageItem")," component returns a JSX structure representing an individual chat message. It displays the sender's\navatar, the message content, and an option to copy the message content to the clipboard."),(0,s.kt)("h4",{id:"usage"},"Usage"),(0,s.kt)("p",null,"To use the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageItem")," component, follow these steps:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Import the required components and utilities:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import { Avatar, Box, IconButton } from '@mui/material';\nimport { ContentCopy, LibraryAddCheck } from '@mui/icons-material';\nimport chatGPTMessagePhoto from '../../../assets/logos/s-logo-for-chat.svg';\nimport { sx } from './messageItem.sx';\nimport { CopyToClipboard } from 'react-copy-to-clipboard/src';\nimport { useEffect, useState, useCallback, memo } from 'react';\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Define the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageItem")," component:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const MessageItem = ({ message, profilePhoto = '' }) => {\n    // ... message item component code ...\n};\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Determine whether the sender is the user or not using the ",(0,s.kt)("inlineCode",{parentName:"p"},"senderIsUser")," boolean:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const senderIsUser = message.role === 'user';\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Initialize the ",(0,s.kt)("inlineCode",{parentName:"p"},"isCopied")," state to track whether the message content has been copied:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const [isCopied, setIsCopied] = useState(false);\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Define a handler to mark the message content as copied:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"const handleCopyGeneratedResponse = useCallback(() => {\n    setIsCopied(true);\n}, []);\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Implement an effect to reset the ",(0,s.kt)("inlineCode",{parentName:"p"},"isCopied")," state after a certain duration:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"useEffect(() => {\n    if (isCopied) {\n        const timer = setTimeout(() => {\n            setIsCopied(false);\n        }, 3000);\n\n        return () => clearTimeout(timer);\n    }\n}, [isCopied]);\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Render the message item structure:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"return (\n    <Box sx={{ ...sx.container, ...(senderIsUser && sx.userMessageContainer) }}>\n        {/* ... avatar ... */}\n        <Box sx={{ ...sx.messageItem, ...(senderIsUser && sx.userMessageItem) }}>{/* ... message content ... */}</Box>\n        {!senderIsUser && (\n            <CopyToClipboard\n                text={message.content}\n                onCopy={handleCopyGeneratedResponse}\n            >\n                <IconButton sx={sx.copyIcon}>{/* ... copy icon ... */}</IconButton>\n            </CopyToClipboard>\n        )}\n    </Box>\n);\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Export the component using ",(0,s.kt)("inlineCode",{parentName:"p"},"memo")," for rendering optimization:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"export default memo(MessageItem);\n")))),(0,s.kt)("h4",{id:"component-structure"},"Component Structure"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageItem")," component consists of the following sections:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Avatar"),": Displays the sender's avatar, which varies based on whether the sender is the user or the chatbot.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Message Content"),": Displays the message content. The color of the text changes based on the sender's role.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Copy Icon"),": If the sender is not the user, this section contains an option to copy the message content to the\nclipboard. The icon changes to indicate that the content has been copied."))),(0,s.kt)("h4",{id:"example"},"Example"),(0,s.kt)("p",null,"Here's a basic example of how you can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageItem")," component in a parent component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import React from 'react';\nimport MessageItem from './MessageItem';\n\nconst ChatWindow = () => {\n    const messages = [\n        // ... list of message objects ...\n    ];\n\n    return (\n        <div>\n            {messages.map((message) => (\n                <MessageItem\n                    key={message.id}\n                    message={message}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default ChatWindow;\n")),(0,s.kt)("p",null,"This will render a list of ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageItem")," components, each representing an individual message in the chat window."))}u.isMDXComponent=!0}}]);