"use strict";(self.webpackChunksgpt=self.webpackChunksgpt||[]).push([[9533],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=i,g=m["".concat(p,".").concat(c)]||m[c]||u[c]||l;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const l={},r=void 0,o={unversionedId:"Components/UI/FileInput/FileInput",id:"Components/UI/FileInput/FileInput",title:"FileInput",description:"The FileInput component is designed to provide a user-friendly interface for uploading files, specifically images. It",source:"@site/docs/Components/UI/FileInput/FileInput.md",sourceDirName:"Components/UI/FileInput",slug:"/Components/UI/FileInput/",permalink:"/sgpt-docs/Components/UI/FileInput/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Components/UI/FileInput/FileInput.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ProfileSavedFilters",permalink:"/sgpt-docs/Components/ProfilePage/ProfileSavedFilters/"},next:{title:"ProgressiveImage",permalink:"/sgpt-docs/Components/UI/ProgressiveImage/"}},p={},s=[{value:"Props",id:"props",level:3},{value:"Component Structure",id:"component-structure",level:3},{value:"Handlers",id:"handlers",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Overview",id:"overview",level:3}],d={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FileInput")," component is designed to provide a user-friendly interface for uploading files, specifically images. It\nsupports both manual selection and drag-and-drop functionality."),(0,i.kt)("h3",{id:"props"},"Props"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"image")," (object, optional): The currently selected image file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setImage")," (function, required): A callback function to set the selected image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"handleFileChange")," (function, required): A callback function to handle the file change event.")),(0,i.kt)("h3",{id:"component-structure"},"Component Structure"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Container"),": A ",(0,i.kt)("inlineCode",{parentName:"p"},"Box")," component that serves as the container for the file input section."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Width, display, alignment, spacing, and styling are defined using inline styles."),(0,i.kt)("li",{parentName:"ul"},"The background color changes when a file is being dragged (",(0,i.kt)("inlineCode",{parentName:"li"},"isDragging")," state)."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Image Display Section"),": Displayed when an image is selected."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Displays the selected image's name and a delete button."),(0,i.kt)("li",{parentName:"ul"},"On clicking the delete button, the image is removed."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Upload Button Section"),": Displayed when no image is selected."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"An icon button triggers the file input dialog when clicked."),(0,i.kt)("li",{parentName:"ul"},'A button with custom styling and text "Upload image" is also provided.'),(0,i.kt)("li",{parentName:"ul"},'A message "or drop files to upload" is shown below the buttons.'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Hidden File Input"),": An ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," element with a style set to ",(0,i.kt)("inlineCode",{parentName:"p"},"display: none"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This element is used to capture file selection events and trigger the ",(0,i.kt)("inlineCode",{parentName:"li"},"handleFileChange")," callback.")))),(0,i.kt)("h3",{id:"handlers"},"Handlers"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleFileRemove"),": Removes the currently selected image by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"setImage")," callback with ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleDragEnter"),": Called when a file is dragged over the container. Updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDragging")," state.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleDragOver"),": Called when a file is dragged over the container. Prevents the default behavior to allow dropping.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleDragLeave"),": Called when a file is dragged out of the container. Updates the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDragging")," state.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"handleDrop"),": Called when a file is dropped into the container."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Updates the ",(0,i.kt)("inlineCode",{parentName:"li"},"isDragging")," state."),(0,i.kt)("li",{parentName:"ul"},"Extracts the selected file from the event data and calls the ",(0,i.kt)("inlineCode",{parentName:"li"},"setImage")," callback.")))),(0,i.kt)("h3",{id:"example-usage"},"Example Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},"import FileInput from './FileInput';\n\n// ...\n\nconst MyComponent = () => {\n    const [selectedImage, setSelectedImage] = useState(null);\n\n    const handleFileChange = (event) => {\n        const selectedFile = event.target.files[0];\n        setSelectedImage(selectedFile);\n    };\n\n    return (\n        <div>\n            <FileInput\n                image={selectedImage}\n                setImage={setSelectedImage}\n                handleFileChange={handleFileChange}\n            />\n            {/* Other content */}\n        </div>\n    );\n};\n\nexport default MyComponent;\n")),(0,i.kt)("h3",{id:"overview"},"Overview"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The component employs the ",(0,i.kt)("inlineCode",{parentName:"li"},"useState"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"useRef"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"memo")," hooks for optimized rendering."),(0,i.kt)("li",{parentName:"ul"},"It provides a visual indication when a file is being dragged over the container."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"handleFileChange")," callback handles the actual image file selection."),(0,i.kt)("li",{parentName:"ul"},"Users can also select an image by clicking the provided buttons.")),(0,i.kt)("p",null,"This component enhances the user experience for uploading images in your application."))}u.isMDXComponent=!0}}]);